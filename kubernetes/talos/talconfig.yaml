---
clusterName: ${CLUSTER_NAME}

# renovate: datasource=docker depName=ghcr.io/siderolabs/installer
talosVersion: v1.7.4
# renovate: datasource=github-releases extractVersion=^v(?<version>.*)$ depName=kubernetes/kubernetes
kubernetesVersion: 1.30.0

endpoint: "https://${CLUSTER_NAME}.${INTERNAL_DOMAIN}:6443"

allowSchedulingOnMasters: true
allowSchedulingOnControlPlane: true

clusterPodNets:
  - 172.22.0.0/16
clusterSvcNets:
  - 172.23.0.0/16

cniConfig:
  name: none

additionalApiServerCertSans:
  - ${CLUSTER_ENDPOINT_IP}
  - ${EXTERNAL_CLUSTER_NAME}.${EXTERNAL_DOMAIN}

additionalMachineCertSans:
  - ${CLUSTER_ENDPOINT_IP}
  - ${CLUSTER_NAME}.${INTERNAL_DOMAIN}
  - ${EXTERNAL_CLUSTER_NAME}.${EXTERNAL_DOMAIN}

nodes:
  # NUC Pro 14 - 32GB / 1 TB Nvme
  - hostname: pickhaus-node-001.${INTERNAL_DOMAIN}
    controlPlane: true
    ipAddress: 192.168.69.1
    installDisk: /dev/nvme0n1
    installDiskSelector:
      model: Micron*
    disableSearchDomain: true
    nameservers:
      - "192.168.69.10"
    networkInterfaces:
      - interface: eth0
      # enp86s0
        addresses:
          - "192.168.69.1/22"
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.68.1
            metric: 1024
        dhcp: true
        vip:
          ip: ${CLUSTER_ENDPOINT_IP}
    nodeLabels: &controlPlaneLabels
      plan.upgrade.cattle.io/talos: ""
      topology.kubernetes.io/region: pick
      topology.kubernetes.io/zone: pick-u
      

  # NUC Pro 13 - 64GB / 2 TB Nvme
  - hostname: pickhaus-node-002.${INTERNAL_DOMAIN}
    controlPlane: true
    ipAddress: 192.168.69.2
    # installDisk: /dev/sdb
    installDiskSelector:
      model: NT-256 2242*
    disableSearchDomain: true
    nameservers:
      - "192.168.69.10"
    networkInterfaces:
      # enp86s0
      - interface: eth0
        addresses:
          - "192.168.69.2/22"
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.68.1
            metric: 1024
        dhcp: true
        vip:
          ip: ${CLUSTER_ENDPOINT_IP}
    nodeLabels: &controlPlaneLabels
      plan.upgrade.cattle.io/talos: ""
      topology.kubernetes.io/region: pick
      topology.kubernetes.io/zone: pick-u

  # Dell Optiplex 3080 - 64GB / 2TB Crucial Nvme
  - hostname: pickhaus-node-003.${INTERNAL_DOMAIN}
    controlPlane: true
    ipAddress: 192.168.69.3
    # installDisk: /dev/sdb
    installDiskSelector:
      model: Patriot Burst El*
    disableSearchDomain: true
    nameservers:
      - "192.168.69.10"
    networkInterfaces:
      # enp2s0
      - interface: eth0 
        dhcp: true
        addresses:
          - "192.168.69.3/22"
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.68.1
            metric: 1024
        vip:
          ip: ${CLUSTER_ENDPOINT_IP}
    nodeLabels: &controlPlaneLabels
      plan.upgrade.cattle.io/talos: ""
      topology.kubernetes.io/region: pick
      topology.kubernetes.io/zone: pick-u

  # Dell Optiplex 3080 - 64GB / 2TB Crucial Nvme
  - hostname: pickhaus-node-004.${INTERNAL_DOMAIN}
    controlPlane: true
    ipAddress: 192.168.69.4
    # installDisk: /dev/sdb
    installDiskSelector:
      model: Patriot Burst El*
    disableSearchDomain: true
    nameservers:
      - "192.168.69.10"
    networkInterfaces:
      # enp2s0
      - interface: eth0 
        dhcp: true
        addresses:
          - "192.168.69.4/22"
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.68.1
            metric: 1024
        vip:
          ip: ${CLUSTER_ENDPOINT_IP}
    nodeLabels: &controlPlaneLabels
      plan.upgrade.cattle.io/talos: ""
      topology.kubernetes.io/region: pick
      topology.kubernetes.io/zone: pick-u

  # Tiny box 48GB RAM/ 1TB Nvme
  - hostname: pickhaus-node-005.${INTERNAL_DOMAIN}
    controlPlane: false
    ipAddress: 192.168.69.5
    installDisk: /dev/nvme1n1
    installDiskSelector:
      model: WDC*
    disableSearchDomain: true
    nameservers:
      - "192.168.69.10"
    networkInterfaces:
      - interface: eth0
        addresses:
          - "192.168.69.5/22"
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.68.1
            metric: 1024
        dhcp: true
        vip:
          ip: ${CLUSTER_ENDPOINT_IP}
    nodeLabels: &controlPlaneLabels
      plan.upgrade.cattle.io/talos: ""
      topology.kubernetes.io/region: pick
      topology.kubernetes.io/zone: pick-u

  # system76 laptop
  # - hostname: tiny-002.${INTERNAL_DOMAIN}
  #   controlPlane: true
  #   ipAddress: 192.168.69.11
  #   installDisk: /dev/nvme1n1
  #     model: Samsung SSD 980 PRO 2TB
  #   disableSearchDomain: true
  #   nameservers:
  #     - "192.168.1.131"
  #   networkInterfaces:
  #     - interface: enp1s0
  #       dhcp: false
  #       addresses:
  #         - "192.168.69.11/22"
  #       routes:
  #         - network: 0.0.0.0/0
  #           gateway: 192.168.68.1
  #           metric: 1024
  #       vip:
  #         ip: ${CLUSTER_ENDPOINT_IP}
  #   nodeLabels: *controlPlaneLabels
  #   schematic:
  #     customization:
  #       systemExtensions:
  #         officialExtensions:
  #         - siderolabs/amdgpu-firmware
  #         - siderolabs/amd-ucode
  #         - siderolabs/iscsi-tools
controlPlane:
  schematic:
    customization:
      extraKernelArgs:
          - net.ifnames=0
      systemExtensions:
          officialExtensions:
              - siderolabs/fuse3
              - siderolabs/i915-ucode
              - siderolabs/intel-ucode
              - siderolabs/iscsi-tools
              - siderolabs/util-linux-tools
              - siderolabs/v4l-uvc-drivers
              # - siderolabs/zfs
  patches:
    # Configure containerd
    - |-
      machine:
        files:
          - op: create
            path: /etc/cri/conf.d/20-customization.part
            content: |-
              [plugins."io.containerd.grpc.v1.cri"]
                enable_unprivileged_ports = true
                enable_unprivileged_icmp = true
              [plugins."io.containerd.grpc.v1.cri".containerd]
                discard_unpacked_layers = false
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                discard_unpacked_layers = false

    # Disable search domain everywhere
    - |-
      machine:
        network:
          disableSearchDomain: true

    # Configure kubelet
    - |-
      machine:
        kubelet:
          extraArgs:
            feature-gates: GracefulNodeShutdown=true
            rotate-server-certificates: true
          extraConfig:
            maxPods: 250
          nodeIP:
            validSubnets:
              - 192.168.68.0/22

      # Enable KubePrism
    - |-
      machine:
        features:
          kubePrism:
            enabled: true
            port: 7445

    # Force nameserver
    - |-
      machine:
        network:
          nameservers:
            - ${DNS_SERVER}

    # Configure NTP
    - |-
      machine:
        time:
          disabled: false
          servers:
            - ${NTP_SERVER}

    # Static host entries
    - |-
      machine:
        network:
          extraHostEntries:
            - ip: ${CLUSTER_ENDPOINT_IP}
              aliases:
                - ${CLUSTER_NAME}.${INTERNAL_DOMAIN}
            - ip: ${CLUSTER_ENDPOINT_IP}
              aliases:
                - ${EXTERNAL_CLUSTER_NAME}.${EXTERNAL_DOMAIN}

    # Custom sysctl settings
    - |-
      machine:
        sysctls:
          fs.inotify.max_user_watches: 1048576
          fs.inotify.max_user_instances: 8192

    # Various udev rules
    - |-
      machine:
        udev:
          rules:
            - KERNEL=="ttyUSB[0-9]", GROUP="20", MODE="0660"

    # Cluster configuration
    - |-
      cluster:
        allowSchedulingOnMasters: true
        controllerManager:
          extraArgs:
            bind-address: 0.0.0.0
        proxy:
          disabled: true
        scheduler:
          extraArgs:
            bind-address: 0.0.0.0

    # ETCD configuration
    - |-
      cluster:
        etcd:
          extraArgs:
            listen-metrics-urls: http://0.0.0.0:2381
          advertisedSubnets:
            - 192.168.68.0/22

    # Disable default API server admission plugins.
    - |-
      - op: remove
        path: /cluster/apiServer/admissionControl

    # Enable K8s Talos API Access
    - |-
      machine:
        features:
          kubernetesTalosAPIAccess:
            enabled: true
            allowedRoles:
              - os:admin
            allowedKubernetesNamespaces:
              - system
